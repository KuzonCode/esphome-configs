substitutions:
  sensor_gpio_left: GPIO10
  sensor_id_left: bradleys_side
  sensor_gpio_right: GPIO20
  sensor_id_right: rachs_side

packages:
  diagnostics: !include
    file: ../esphome-common/diagnostics.yaml
    vars:
      boot_gpio: GPIO9
      uptime_id: bed_presence_uptime
      restart_id: btn_restart
      status_id: bed_presence_status

  left_bed_sensor: !include
    file: sensor.yaml
    vars:
      sensor_name: "Bradley's Side"
      sensor_id: ${sensor_id_left}
      sensor_gpio: ${sensor_gpio_left}

  right_bed_sensor: !include
    file: sensor.yaml
    vars:
      sensor_name: "Rach's Side"
      sensor_id: ${sensor_id_right}
      sensor_gpio: ${sensor_gpio_right}

binary_sensor:
  - platform: template
    name: Full
    id: full
    device_class: occupancy
    icon: mdi:bunk-bed
    lambda: return id(occupied_${sensor_id_left}).state && id(occupied_${sensor_id_right}).state;

  - platform: template
    name: Occupied
    id: occupied
    device_class: occupancy
    icon: mdi:bunk-bed
    lambda: return id(occupied_${sensor_id_left}).state || id(occupied_${sensor_id_right}).state;

  - platform: template
    name: Recently Occupied
    id: recently_occupied
    device_class: occupancy
    lambda: return id(occupied_${occupancy}).state;
    off_delay: 300s
    update_interval: 1s 

text_sensor:
  - platform: template
    name: State
    id: state
    icon: mdi:bunk-bed
    update_interval: 1s
    lambda: |-
        if (id(full).state) {
          return {"Full"};
        }
        else if (id(occupied_${sensor_id_left}).state) {
          return {"Occupied (Bradley)"};
        }
        else if (id(occupied_${sensor_id_right}).state) {
          return {"Occupied (Rach)"};
        }
        else if (id(occupied_${recently_occupied}).state) {
          return {"Recently Empty"};
        }
        return {"Empty"};
